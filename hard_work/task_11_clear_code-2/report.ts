
//2.1
// Класс CrmIntegrationService - класс, объединяющий в себе всю логику взаимодействия с CRM, включая инициализацию интеграции,
// изменение статусов, логику звоноков, действий после звонка, логирования. Явно нарушается SRP, можно вынести 5-6 классов.

//2.2
// Класс ColorAlertsService. В нем только один метод, меняющий формат цветов. Можно вынести в класс с утилитами.

//2.3
// Класс VoiceInteractionService имеет метод listenWsMessages, который слушает сообщения из вебсокета. Но сообщения не являются принадлежностью
// VoiceInteractionService, это часть интерфейса агента.

//2.4
// У нас в проекте используется ngrx - это redux для angular. И в целом, сама его модель предполагает, что action, складывающий
// что-то в store, может быть вызван из любого места в программе. Есть множество мест, из которых вызываются экшены, скоуп
// их использования никак не ограничен. Тогда можно сказать, что все сторы с данными попадают в этот пункт.

//2.5
// В текущем проекте почти все классы зависят от деталей реализации других классов, интерфейсов почти нет.

//2.6
// В бэкендовом проекте достаточно много таких примеров
//private Integer getCampaignIdIfExists(AbstractConferenceInstance conference) {
//         return conference instanceof ConferenceInstanceOutbound
//             ? ((ConferenceInstanceOutbound) conference).getCampaignId() : null;
//     }

//2.7
// Не смог найти подобные примеры.

//2.8
// Несколько примеров нашел

//3.1
// Весь фронтовый проект такой. Особенно части, которые касаются голосовых звонков и действий во время их.

//3.2
// На предыдущей работе бэковый проект был местами довольно сложно организован. Был фасад, которые в зависимости от типа документа
// создавал фабрики, которые создавали нужные парсеры, валидаторы и т.д. Плюсы у этого были, но также это было тяжело дебажить из-за
// довольно высокого уровня абстракции.